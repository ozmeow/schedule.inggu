package ru.wzrdmhm.schedule_inggu.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ru.wzrdmhm.schedule_inggu.dto.BotResponse;
import ru.wzrdmhm.schedule_inggu.dto.CommandRequest;
import ru.wzrdmhm.schedule_inggu.model.Schedule;
import ru.wzrdmhm.schedule_inggu.model.User;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;

@Service
public class CommandService {

    @Autowired
    private UserService userService;

    @Autowired
    private ScheduleService scheduleService;

    public BotResponse processCommand(CommandRequest request) {
        try {
            switch (request.getCommand()) {
                case START:
                    return handleStartCommand(request.getUserId());
                case TODAY_SCHEDULE:
                    return handleTodaySchedule(request.getUserId());
                case TOMORROW_SCHEDULE:
                    return handleTomorrowSchedule(request.getUserId());
                case HELP:
                    return HandleHelpCommand();
                case SET_GROUP:
                    return handleSetGroupCommand(request.getUserId(), request.getParameters());
                default:
                    return new BotResponse("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", false);
            }
        } catch (Exception e) {
            return new BotResponse("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: " + e.getMessage(), false);
        }
    }

    private BotResponse handleStartCommand(Long userId) {
        User user = userService.findOrCreateUser(userId, "User");
        String response = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!\n" +
                "üìö –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: " + user.getGroupName() + "\n" +
                "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥";
        return new BotResponse(response, true);
    }

    private BotResponse handleTodaySchedule(Long userId) {
        try {
            String userGroup = userService.getUserGroup(userId);
            LocalDate today = LocalDate.now();
            List<Schedule> schedules = scheduleService.getScheduleForGroup(userGroup, today.toString());

            if (schedules.isEmpty()) {
                return new BotResponse("\uD83C\uDF89 –ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç!", true);
            }

            String response = formatBeautifulSchedule(schedules, today, "c–µ–≥–æ–¥–Ω—è");
            return new BotResponse(response, true);
        } catch (Exception e) {
            return new BotResponse("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + e.getMessage(), false);
        }
    }

    private BotResponse handleTomorrowSchedule(Long userId) {
        try {
            String userGroup = userService.getUserGroup(userId);

            LocalDate tomorrow = LocalDate.now().plusDays(1);
            DayOfWeek dayOfWeek = tomorrow.getDayOfWeek();
            String dayNameRussia = getRussianDayName(dayOfWeek);

            List<Schedule> schedule = scheduleService.getScheduleForGroup(userGroup, tomorrow.toString());


            if (isWeekend(dayOfWeek)) {
                return new BotResponse("–ó–∞–≤—Ç—Ä–∞ " + dayNameRussia +
                        ". üõå –ù–∞–± –µ —Ö—å–µ–π–Ω, –¥–∏–∫–∞-m –¥–∞—Ä —Ö—å—É–Ω)", false);
            }

            if (schedule.isEmpty()) {
                return new BotResponse("\uD83C\uDF89 –ù–∞ –∑–∞–≤—Ç—Ä–∞ " +
                        dayNameRussia + " –ø–∞—Ä –Ω–µ—Ç!", true);
            }

            String response = formatBeautifulSchedule(schedule, tomorrow, dayNameRussia);
            return new BotResponse(response, true);
        } catch (Exception e) {
            return new BotResponse("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + e.getMessage(), false);
        }
    }

    private boolean isWeekend(DayOfWeek weekend) {
        return weekend == DayOfWeek.SATURDAY || weekend == DayOfWeek.SUNDAY;
    }

    private String getRussianDayName(DayOfWeek day) {
        switch (day) {
            case MONDAY:
                return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫";
            case TUESDAY:
                return "–í—Ç–æ—Ä–Ω–∏–∫";
            case WEDNESDAY:
                return "–°—Ä–µ–¥—É";
            case THURSDAY:
                return "–ß–µ—Ç–≤–µ—Ä–≥";
            case FRIDAY:
                return "–ü—è—Ç–Ω–∏—Ü—É";
            case SATURDAY:
                return "–°—É–±–±–æ—Ç—É";
            case SUNDAY:
                return "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ";
            default:
                return day.toString();
        }
    }

    private BotResponse HandleHelpCommand() {
        String response = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n" +
                "/today - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n" +
                "/tomorrow - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n" +
                "/setgroup [–≥—Ä—É–ø–ø–∞] - –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É\n" +
                "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º";
        return new BotResponse(response, true);
    }

    private BotResponse handleSetGroupCommand(Long userId, Map<String, String> parameters) {
        try {
            String groupName = parameters.get("groupName");
            if (groupName == null || groupName.trim().isEmpty()) {
                return new BotResponse("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: /setgroup –ò–í–¢-21", false);
            }
            userService.setUserGroup(userId, groupName.trim());
            return new BotResponse("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " + groupName, true);
        } catch (Exception e) {
            return new BotResponse("‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã: " + e.getMessage(), false);
        }
    }

    /*
    private String formatScheduleResponse(List<Schedule> schedules, LocalDate date) {
        StringBuilder sb = new StringBuilder();
        sb.append("\uD83D\uDCDA –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ").append(date).append(":\n\n");
        for (int i = 0; i < schedules.size(); ++i) {
            Schedule s = schedules.get(i);
            sb.append(i + 1).append(".").append(s.getTime())
                    .append(" - ").append(s.getSubject())
                    .append(" (–∞—É–¥–∏—Ç.").append(s.getClassroom()).append(")\n");
        }
        return sb.toString();
    }
    */

    private String formatBeautifulSchedule(List<Schedule> schedule, LocalDate date, String period) {
        String dayName = getRussianDayName(date.getDayOfWeek());

        String header = String.format("\uD83D\uDCC5 –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ %s (%s)%n\uD83D\uDCC6 %s%n%n", period, dayName, date);

        StringBuilder body = new StringBuilder(header);

        for (int i = 0; i < schedule.size(); ++i) {
            Schedule s = schedule.get(i);

            body.append(String.format("\uD83D\uDD39 –ü–∞—Ä–∞ %d%n", i + 1));
            body.append(String.format("   \uD83D\uDD50 %s%n", s.getTime()));
            body.append(String.format("   \uD83D\uDCDA %s%n", s.getSubject()));

            if (s.getClassroom() != null && !s.getClassroom().isEmpty()) {
                body.append(String.format("   üìç–ê—É–¥. %s%n", s.getClassroom()));
            }

            if (s.getTeacher() != null && !s.getTeacher().isEmpty()) {
                body.append(String.format("üë®üèª‚Äçüè´ –ü—Ä–µ–ø–æ–¥. %s%n", s.getTeacher()));
            }

            if(i < schedule.size() - 1) {
                body.append(String.format("   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ%n"));
            }

        }

        body.append(String.format("%n\uD83D\uDCCA–í—Å–µ–≥–æ –ø–∞—Ä: %d", schedule.size()));

        return body.toString();
    }
}
